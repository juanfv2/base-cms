import {Component, Input, OnInit, OnChanges, SimpleChanges} from '@angular/core'
import {ActivatedRoute, Router} from '@angular/router'
import {NgbModal} from '@ng-bootstrap/ng-bootstrap'

import {
JfUtils,
JfApiRoute,
JfResponse,
JfCondition,
JfCrudService,
JfResponseList,
JfLazyLoadEvent,
JfRequestOption,
JfMessageService,
JfSearchCondition,
JfStorageManagement,
BaseCmsListComponent,
} from '@juanfv2/base-cms'
import {k} from 'src/environments/k'
import {l} from 'src/environments/l'

import { $RELATION_MODEL_NAMES$ } from 'src/app/models/_models';

const kRoute = k.routes.$MODEL_NAME_PLURAL_CAMEL$;
const kConditions = `${k.suggestions}${kRoute}`;

@Component({
selector: 'app-$MODEL_NAME_DASHED$-list',
templateUrl: './$MODEL_NAME_DASHED$-list.component.html',
styleUrls: ['./$MODEL_NAME_DASHED$-list.component.scss']
})
export class $MODEL_NAME$ListComponent extends BaseCmsListComponent implements OnInit, OnChanges {
$RELATIONS_AS_FIELDS$
override itemCurrent?: $MODEL_NAME$;
override labels = l
override kRoute = kRoute
override kConditions = kConditions
override mApi = new JfApiRoute(kRoute)
override responseList: JfResponseList<$MODEL_NAME$> = new JfResponseList<$MODEL_NAME$>(0, 0, []);

constructor(
public override router: Router,
public override modalService: NgbModal,
public override crudService: JfCrudService,
public override messageService: JfMessageService,
private route: ActivatedRoute,) {
super()
this.queryFieldOptions = [ $SEARCHABLE_FIELDS$ ];
this.hasPermission2show = JfRequestOption.isAuthorized(`/${kRoute}/show`)
this.hasPermission2new = JfRequestOption.isAuthorized(`/${kRoute}/new`)
this.hasPermission2delete = JfRequestOption.isAuthorized(`/${kRoute}/delete`)
}

ngOnInit(): void {
this.initSearch();
this.onLazyLoad();
}

ngOnChanges(changes: SimpleChanges): void {
if (this.isSubComponent) {
this.initSearch();
this.onLazyLoad();
}
}

initSearchModel(): any {
const search = !this.isSubComponent ? JfStorageManagement.getItem(kConditions) : null;
const mSearch = {
lazyLoadEvent: new JfLazyLoadEvent(),
$RELATIONS_AS_INIT_SEARCH_MODEL$
};
const r = search ? (JSON.parse(search) || mSearch) : mSearch;
// console.log('r', r);
return r;
}

override initSearch(): void {
this.modelSearch = this.initSearchModel();
if (this.isSubComponent) {
$RELATIONS_AS_INIT_SEARCH$
} else {
if (this.modelSearch) {
if (this.modelSearch.conditions) {
Promise.resolve(this.searchField).then(() => {
for (const condition of this.modelSearch.conditions) {
this.addFilter(condition);
}
});
}
}
}
}

override onLazyLoad(strAction = ''): void {
if (this.loading) {
return;
}
// console.log('onLazyLoad this.loading', this.loading);
// console.log('onLazyLoad this.loading', this.modelSearch);
this.loading = true;
// prepare
let nextOperator = 'AND';
const conditions: any[] = [];
$RELATIONS_AS_ON_LAZY_LOAD$
if (this.modelSearch.conditions) {
for (const c of this.modelSearch.conditions) {
if (c.value || c.field.type === 'boolean') {
const nCondition = `${nextOperator} ${c.field.field} ${c.cond}`;
nextOperator = c.oper;
switch (c.field.type) {
case 'date':
const d = `${c.value.year}-${c.value.month}-${c.value.day}`;
conditions.push(new JfCondition(nCondition, d));
break;
// case 'boolean':
// const bx = !c.value;
// conditions.push(new JfCondition(nCondition, bx));
// break;
default:
conditions.push(new JfCondition(nCondition, c.value));
break;
}
}
}
}
// joinType === '<' leftJoin, '>' rightJoin
// 'joinTable.joinTablePK.ownTableFK'
// 'joinTable.joinTablePK.ownTableFK.joinType'
// 'joinTable.joinTablePK.ownTable.ownTableFK'
// 'joinTable.joinTablePK.ownTable.ownTableFK.joinType'
this.modelSearch.lazyLoadEvent.joins = [
$RELATIONS_AS_ON_LAZY_LOAD2$
];
this.modelSearch.lazyLoadEvent.conditions = conditions;
this.modelSearch.lazyLoadEvent.additional = [];
// this.modelSearch.lazyLoadEvent.includes = ['relation-1tm', 'relation-mt1', 'relation-1t1', ...];
const mSearch = JSON.stringify(this.modelSearch);
switch (strAction) {
case 'export':
const csvColumns: any = JfUtils.csvColumns(this.labels.$MODEL_NAME_CAMEL$);
this.modelSearch.lazyLoadEvent.additional.push(new JfCondition('action', strAction));
this.modelSearch.lazyLoadEvent.additional.push(new JfCondition('title', this.labels.$MODEL_NAME_CAMEL$.ownNamePlural));
this.modelSearch.lazyLoadEvent.additional.push(new JfCondition('fields', JSON.stringify(csvColumns)));
this.crudService.export(kRoute, this.modelSearch.lazyLoadEvent)
.subscribe(
{next: resp => {
this.loading = false;
JfUtils.downloadFile(resp, this.labels.$MODEL_NAME_CAMEL$.ownNamePlural);
},
error: error => {
this.loading = false;
this.messageService.danger(k.project_name, error, this.labels.$MODEL_NAME_CAMEL$.ownName);
}
}
);
this.modelSearch.lazyLoadEvent.additional = [];
break;
default:
this.crudService.getPage(kRoute, this.modelSearch.lazyLoadEvent)
.subscribe(
{next: (resp: JfResponse) => {
this.loading = false;
this.responseList = resp.data;
if (!this.isSubComponent) {
JfStorageManagement.setItem(kConditions, mSearch);
}
},
error: error => {
this.loading = false;
this.messageService.danger(k.project_name, error, this.labels.$MODEL_NAME_CAMEL$.ownName);}
}
);
break;
}
}

override addNew(): void {
this.itemCurrent = { $RELATIONS_AS_ADD_NEW$ } as unknown as $MODEL_NAME$;
super.addNew()
}
}
