import {Component, forwardRef} from '@angular/core'
import {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms'

import {Observable, of} from 'rxjs'
import {tap, catchError, map} from 'rxjs/operators'

import {
  JfSort,
  JfResponse,
  JfCondition,
  JfLazyLoadEvent,
  jfTemplateAutoComplete,
  BaseCmsAutoCompleteComponent,
} from '@juanfv2/base-cms'
import {k} from 'src/environments/k'
import {l} from 'src/environments/l'


import { $MODEL_NAME$, $RELATION_MODEL_NAMES$ } from 'src/app/models/_models';

// Resource: http://almerosteyn.com/2016/04/linkup-custom-control-to-ngcontrol-ngmodel

export const $MODEL_NAME_SNAKE$_auto_complete_control_value_accessor: any = {
provide: NG_VALUE_ACCESSOR,
useExisting: forwardRef(() => $MODEL_NAME$AutoCompleteComponent),
multi: true
};

const kRoute = k.routes.$MODEL_NAME_PLURAL_CAMEL$;

@Component({
selector: 'app-$MODEL_NAME_DASHED$-auto-complete',
template: jfTemplateAutoComplete,
providers: [$MODEL_NAME_SNAKE$_auto_complete_control_value_accessor]
})
export class $MODEL_NAME$AutoCompleteComponent extends BaseCmsAutoCompleteComponent implements ControlValueAccessor {
$RELATIONS_AS_FIELDS_1$

override labels = l
override kRoute = kRoute

// override formatter = (x: $MODEL_NAME$) => `${ x.name || ''}`;

override searchTerm(term: string): Observable<any> {
this.previousTerm = term;
const conditions: any[] = [];
if (this.avoidable && this.avoidable.length > 0) {
conditions.push(new JfCondition(`and ${this.labels.$MODEL_NAME_CAMEL$.$PRIMARY_KEY_NAME$.field} not-in`, this.avoidable.map(r => r.id)));
}
$RELATIONS_AS_FIELDS_2$
if (term) {
const g: any[] = [];
$SEARCHABLE_FIELDS_1$
conditions.push(g);
}
const mEvent = new JfLazyLoadEvent();
mEvent.select = [
$SEARCHABLE_FIELDS_2$
];
mEvent.sorts = [new JfSort(`${this.labels.$MODEL_NAME_CAMEL$.$PRIMARY_KEY_NAME$.field}`, JfSort.asc)];
mEvent.additional = [new JfCondition('cp', this.currentPage)];
mEvent.conditions = conditions;
// mEvent.rows = 10;
return this.crudService.getPage(kRoute, mEvent)
.pipe(
tap(() => this.searchFailed = false),
map((resp: JfResponse) => {
this.searchFailed = resp.data.content.length === 0;
return resp.data.content;
}),
catchError( error => {
this.searchFailed = true;
this.messageService.danger(k.project_name, error, this.labels.$MODEL_NAME_CAMEL$.ownName);
return of([]);
})
);
}

}
