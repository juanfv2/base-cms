<?php

namespace $NAMESPACE_API_CONTROLLER$;

use Illuminate\Http\Request;
use Juanfv2\BaseCms\Resources\GenericResource;
use InfyOm\Generator\Criteria\LimitOffsetCriteria;
use Juanfv2\BaseCms\Controllers\BaseCmsController;
use Juanfv2\BaseCms\Criteria\RequestGenericCriteria;

use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;

$DOC_CONTROLLER$
class $MODEL_NAME$APIController extends BaseCmsController
{
    /** @var  $MODEL_NAME$Repository */
    private $modelRepository;

    public function __construct($MODEL_NAME$Repository $modelRepo)
    {
        $this->modelRepository = $modelRepo;
    }

    $DOC_INDEX$
    public function index(Request $request)
    {
        $action = $request->get('action', '-');
        $criteria = new RequestGenericCriteria($request);

        $this->modelRepository->pushCriteria($criteria);
        $itemCount = $this->modelRepository->count();

        if ($action != 'export') {
            $this->modelRepository->pushCriteria(new LimitOffsetCriteria($request));
        }

        $items = $this->modelRepository->all();

        /* */
        $items = GenericResource::collection($items);
        /* */

        switch ($action) {
            case 'export':
                $headers = json_decode($request->get('fields'), true);
                $zname = $request->get('title', '-');
                return $this->export($zname, $headers, $items);
            default:
                return $this->response2Api($items, $itemCount, $request->get('limit', -1));
        }
    }

    $DOC_STORE$
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        $model = $this->modelRepository->create($input);

        // $model = new GenericResource($model);

        return ['id' => $model->id];
    }

    $DOC_SHOW$
    public function show($id)
    {
        /** @var \$NAMESPACE_MODEL$\$MODEL_NAME$ $model */
        $model = $this->modelRepository->findWithoutFail($id);

        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __('models.$MODEL_NAME_CAMEL$.name')]));
        }
        $model = new GenericResource($model);

        return $model;
    }

    $DOC_UPDATE$
    public function update($id, Update$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        /** @var \$NAMESPACE_MODEL$\$MODEL_NAME$ $model */
        $model = $this->modelRepository->findWithoutFail($id);

        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __('models.$MODEL_NAME_CAMEL$.name')]));
        }

        $model = $this->modelRepository->update($input, $id);

        // $model = new GenericResource($MODEL_NAME_CAMEL$);

        return ['id' => $model->id];
    }

    $DOC_DESTROY$
    public function destroy($id)
    {
        /** @var \$NAMESPACE_MODEL$\$MODEL_NAME$ $model */
        $model = $this->modelRepository->findWithoutFail($id);

        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __('models.$MODEL_NAME_CAMEL$.name')]));
        }

        $model->delete();

        return $this->sendResponse(__('validation.model.deleted', ['model' => __('models.$MODEL_NAME_CAMEL$.name')]), $id);
    }
}
