<?php

namespace $NAMESPACE_APP$\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

use Juanfv2\BaseCms\Resources\GenericResource;
use Juanfv2\BaseCms\Criteria\LimitOffsetCriteria;
use Juanfv2\BaseCms\Criteria\RequestGenericCriteria;

use Juanfv2\BaseCms\Traits\ControllerFiles;
use Juanfv2\BaseCms\Traits\ControllerResponses;
use Juanfv2\BaseCms\Traits\ControllerImportableExportable;

/**
 * @SWG\Swagger(
 *   basePath="/$API_PREFIX$/$API_VERSION$",
 *   @SWG\Info(
 *     title="Laravel Generator APIs",
 *     version="1.0.0",
 *   )
 * )
 * This class should be parent class for other API controllers
 * Class AppBaseController
 */
class AppBaseController extends Controller
{
    use ControllerResponses, ControllerFiles, ControllerImportableExportable;

    /**
     * Display a listing of the {{CurrentModel}}.
     * GET|HEAD /{model}
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
        $action = $request->get('action', '');
        $limit  = $request->get('limit', -1);

        $this->modelRepository->pushCriteria(new RequestGenericCriteria($request));
        $itemCount = $this->modelRepository->count();

        if ($action != 'export') {
            $this->modelRepository->pushCriteria(new LimitOffsetCriteria($request));
        }

        $items = $this->modelRepository->all();

        /* */
        $items = GenericResource::collection($items);
        /* */

        switch ($action) {
            case 'export':
                $headers = json_decode($request->get('fields'), true);
                $zname = $request->get('title', '-');
                return $this->export($zname, $headers, $items);
            default:
                return $this->sendResponse(
                    ['totalPages' => abs(ceil($itemCount / $limit)), 'totalElements' => $itemCount, 'content' => $items,],
                    __('validation.model.list', ['model' => __("models.{$this->modelNameCamel}.plural")])
                );
        }
    }

    /**
     * Store a newly created {{CurrentModel}} in storage.
     * POST /{model}
     *
     * @param Create{{CurrentModel}}APIRequest $request
     *
     * @return Response
     */
    public function store(Request $request)
    {
        $input = $this->validate($request, $this->rules);
        // $input = $request->all();

        $model = $this->modelRepository->create($input); // $model = new GenericResource($model);
        return $this->sendResponse(['id' => $model->id], __('validation.model.stored', ['model' => __("models.{$this->modelNameCamel}.name")]));
    }

    /**
     * Display the specified {{CurrentModel}}.
     * GET|HEAD /{model}/{id}
     *
     * @param int $id
     *
     * @return Response
     */
    public function show($id)
    {
        /** @var \App\Models\{{CurrentModel}} $model */
        $model = $this->modelRepository->findWithoutFail($id);
        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __("models.{$this->modelNameCamel}.name")]));
        }
        $model = new GenericResource($model);
        return $this->sendResponse($model, __('validation.model.showed', ['model' => __("models.{$this->modelNameCamel}.name")]));
    }

    /**
     * Update the specified {{CurrentModel}} in storage.
     * PUT/PATCH /{model}/{id}
     *
     * @param int $id
     * @param Update{{CurrentModel}}APIRequest $request
     *
     * @return Response
     */
    public function update($id, Request $request)
    {
        $input = $this->validate($request, $this->rules);
        // $input = $request->all();

        /** @var \App\Models\{{CurrentModel}} $model */
        $model = $this->modelRepository->findWithoutFail($id);

        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __("models.{$this->modelNameCamel}.name")]));
        }
        $model = $this->modelRepository->update($model, $input); // $model = new GenericResource({{CurrentModel}});
        return $this->sendResponse(['id' => $model->id], __('validation.model.updated', ['model' => __("models.{$this->modelNameCamel}.name")]));
    }

    /**
     * Remove the specified {{CurrentModel}} from storage.
     * DELETE /{model}/{id}
     *
     * @param int $id
     *
     * @throws \Exception
     *
     * @return Response
     */
    public function destroy($id)
    {
        /** @var \App\Models\{{CurrentModel}} $model */
        $model = $this->modelRepository->findWithoutFail($id);

        if (empty($model)) {
            return $this->sendError(__('validation.model.not.found', ['model' => __("models.{$this->modelNameCamel}.name")]));
        }

        $resp = $this->modelRepository->delete($id);

        return $this->sendResponse(['id' => $id], __('validation.model.deleted', ['model' => __("models.{$this->modelNameCamel}.name")]));
    }
}
