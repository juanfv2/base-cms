<?php

namespace Tests;

use App\Models\Auth\Role;
use App\Models\Auth\User;
use App\Models\Auth\Person;
use App\Models\Auth\Account;

trait ApiTestTrait
{
    private $response;
    private $responseContent;

    public function getContent()
    {
        $this->responseContent = json_decode($this->response->getContent(), true);

        return $this->responseContent;
    }

    public function assertApiModifications(array $actualData)
    {
        $this->assertApiSuccess();
        $this->getContent();

        $responseData = $this->responseContent['data'];

        $this->assertNotEmpty($responseData['id']);
    }

    public function assertApiResponse(array $actualData)
    {
        $this->getContent();

        $responseData = $this->responseContent['data'];

        $this->assertNotEmpty($responseData['id']);
        $this->response->assertStatus(200)->assertJson(['success' => true, 'data' => $actualData]);
    }

    public function assertApiSuccess()
    {
        $this->response->assertStatus(200);
        $this->response->assertJson(['success' => true]);
    }

    /**
     * Return an admin user
     * @return User $admin
     */
    protected function admin($overrides = [])
    {
        $person = Person::factory()->create($overrides);
        $admin = $person->user;
        $admin->roles()->attach(
            Role::factory()->admin()->create()
        );

        return $admin;
    }

    /**
     * Return an account user
     * @return User $account
     */
    protected function account($overrides = [])
    {
        $person = Account::factory()->create($overrides);
        $account = $person->user;
        $account->roles()->attach(
            Role::factory()->account()->create()
        );

        return $account;
    }

    /**
     * Return an user
     * @return User
     */
    protected function user($overrides = [])
    {
        return User::factory()->create($overrides);
    }

    /**
     * Acting as an admin
     */
    protected function actingAsAdmin($api = null)
    {
        $this->actingAs($this->admin(), $api);

        return $this;
    }

    /**
     * Acting as an account
     */
    protected function actingAsAccount($api = null)
    {
        $this->actingAs($this->account(), $api);

        return $this;
    }

    /**
     * Acting as an user
     */
    protected function actingAsUser($api = null)
    {
        $this->actingAs($this->user(), $api);

        return $this;
    }
}
